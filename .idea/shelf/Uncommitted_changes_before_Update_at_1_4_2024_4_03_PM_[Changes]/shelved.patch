Index: BE/src/controllers/order.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import mongoose from \"mongoose\";\r\nimport Orders from \"../models/orders.js\";\r\nimport Product from \"../models/product\";\r\nimport {productSchema, UpdateProduct} from \"../Schema/product\";\r\nimport * as functions from \"../service/functions.js\";\r\n// đặt hàng\r\nexport const OrderUser = async (req, res, next) => {\r\n    try {\r\n        let { address, phone, id_user, id_product } = req.body;\r\n        if (!address) return functions.setError(res, \"Vui lòng nhập vào địa chỉ\", 400);\r\n        if (!phone) return functions.setError(res, \"Vui lòng nhập vào số điện thoại\", 400);\r\n        if (!id_product) return functions.setError(res, \"Vui lòng nhập vào id sản phẩm\", 400);\r\n        if (!id_user) return functions.setError(res, \"Vui lòng nhập vào id người mua\", 400);\r\n\r\n        if (id_user && id_product && phone && address) {\r\n            let checkId = await Orders.findOne({}, { id_order: 1 }).sort({ id_order: -1 }).lean();\r\n            let id_order = checkId ? checkId.id_order + 1 : 1;\r\n\r\n            console.log('Creating Order with ID:', id_order);\r\n\r\n            await Orders.create({\r\n                id_order,\r\n                address,\r\n                phone,\r\n                user_id: id_user,\r\n                // You need to define 'products', 'total_price', 'sale_id' before using them.\r\n                products: [], // Replace with the actual array of products\r\n                status: \"pending\",\r\n                total_price: 0, // Replace with the actual total price\r\n                sale_id: null, // Replace with the actual sale ID\r\n            });\r\n\r\n            return functions.success(res, `Đặt hàng thành công với id_order: ${id_order}`);\r\n        }\r\n    } catch (error) {\r\n        console.error('Error in OrderUser:', error);\r\n        return functions.setError(res, error.message);\r\n    }\r\n};\r\n\r\n\r\n// get order\r\nexport const getAll = async (req, res) => {\r\n    try {\r\n        const { page = 1, limit = 10, sort = \"createdAt\", order = -1, ...query } = req.query;\r\n        const skip = (page - 1) * limit;\r\n        const sortOptions = {\r\n            [sort]: order === 1 ? 1 : -1,\r\n        };\r\n        const condition = req.query.user_id ? { user_id: new mongoose.Types.ObjectId(req.query.user_id) } : query;\r\n\r\n        const orders = await Orders.aggregate([\r\n            { $match: condition },\r\n            { $unwind: \"$products\" },\r\n            {\r\n                $lookup: {\r\n                    from: \"products\",\r\n                    localField: \"products.product_id\",\r\n                    foreignField: \"_id\",\r\n                    as: \"product\",\r\n                },\r\n            },\r\n            {\r\n                $lookup: {\r\n                    from: \"payment\",\r\n                    localField: \"payment_id\",\r\n                    foreignField: \"_id\",\r\n                    as: \"payment\",\r\n                },\r\n            },\r\n            {\r\n                $lookup: {\r\n                    from: \"users\", // Assuming your User model is named \"User\" and is stored in the \"users\" collection\r\n                    localField: \"user_id\",\r\n                    foreignField: \"_id\",\r\n                    as: \"user\",\r\n                },\r\n            },\r\n            {\r\n                $unwind: {\r\n                    path: \"$payment\",\r\n                    preserveNullAndEmptyArrays: true,\r\n                },\r\n            },\r\n            {\r\n                $project: {\r\n                    user_id: 1,\r\n                    status: 1,\r\n                    total_price: 1,\r\n                    createdAt: 1,\r\n                    updatedAt: 1,\r\n                    payment: 1,\r\n                    product: { $arrayElemAt: [\"$product\", 0] },\r\n                    quantity: \"$products.quantity\",\r\n                    color: \"$products.color\",\r\n                    size: \"$products.size\",\r\n                    user: { $arrayElemAt: [\"$user\", 0] },\r\n                },\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: {\r\n                        _id: \"$_id\",\r\n                        user_id: \"$user_id\",\r\n                        address: \"$address\",\r\n                        status: \"$status\",\r\n                        payment: \"$payment\",\r\n                        total_price: \"$total_price\",\r\n                        createdAt: \"$createdAt\",\r\n                        updatedAt: \"$updatedAt\",\r\n                    },\r\n                    products: {\r\n                        $push: { product: \"$product\",\r\n                         quantity: \"$quantity\" ,\r\n                         color: \"$color\" ,\r\n                         size: \"$size\" \r\n                        },\r\n                    },\r\n                    user: { $first: \"$user\" },\r\n                },\r\n            },\r\n            {\r\n                $project: {\r\n                    _id: \"$_id\",\r\n                    user_id: \"$_id.user_id\",\r\n                    address: \"$_id.address\",\r\n                    status: \"$_id.status\",\r\n                    total_price: \"$_id.total_price\",\r\n                    payment: \"$_id.payment\",\r\n                    createdAt: \"$_id.createdAt\",\r\n                    updatedAt: \"$_id.updatedAt\",\r\n                    products: 1,\r\n                    user: 1,\r\n                },\r\n            },\r\n            {\r\n                $sort: {\r\n                    createdAt: -1,\r\n                },\r\n            },\r\n            {\r\n                $skip: skip,\r\n            },\r\n            {\r\n                $limit: limit,\r\n            },\r\n        ]);\r\n\r\n        return res.status(200).json({\r\n            message: \"Get all order successfully\",\r\n            data: orders,\r\n        });\r\n    } catch (error) {\r\n        console.error('Error in getAll:', error);\r\n        return functions.setError(res, error.message);\r\n    }\r\n};\r\n\r\n    export const updateStatus = async (req, res, next) => {\r\n        try {\r\n            const posts = await Orders.findByIdAndUpdate(req.params.id, req.body, {new: true});\r\n\r\n            return res.status(200).json({\r\n                message: \"Update order successfully\",\r\n                data: posts,\r\n            });\r\n        } catch (error) {\r\n            res.status(500).json({error: true, message: error.message});\r\n        }\r\n    };\r\n\r\n// Create order\r\n    export const createOrder = async (req, res) => {\r\n        try {\r\n            const newOrder = new Orders(req.body);\r\n            for (const product of newOrder.products) {\r\n                const {product_id, color, size, quantity} = product;\r\n\r\n                // Kiểm tra product_id\r\n                const existingProduct = await Product.findById(product_id);\r\n\r\n                if (!existingProduct) {\r\n                    return res.status(404).json({\r\n                        error: true,\r\n                        message: `Product with ID ${product_id} not found`,\r\n                    });\r\n                }\r\n\r\n                // Kiểm tra logic xử lý số lượng còn lại tại đây nếu cần\r\n                const quantityInfoIndex = existingProduct.listQuantityRemain.findIndex(\r\n                    (item) => item.colorHex === color && item.nameSize === size\r\n                );\r\n\r\n                if (quantityInfoIndex === -1 || existingProduct.listQuantityRemain[quantityInfoIndex].quantity < quantity) {\r\n                    return res.status(400).json({\r\n                        error: true,\r\n                        message: `Insufficient quantity for product ${product_id} with color ${color} and size ${size}`,\r\n                    });\r\n                }\r\n\r\n                // Cập nhật số lượng còn lại\r\n                existingProduct.listQuantityRemain[quantityInfoIndex].quantity -= quantity;\r\n\r\n                // Tạo một bản sao của listQuantityRemain để cập nhật mảng\r\n                const updatedListQuantityRemain = [...existingProduct.listQuantityRemain];\r\n                updatedListQuantityRemain[quantityInfoIndex] = {\r\n                    ...updatedListQuantityRemain[quantityInfoIndex],\r\n                    quantity: existingProduct.listQuantityRemain[quantityInfoIndex].quantity,\r\n                };\r\n\r\n                // Cập nhật lại listQuantityRemain trong existingProduct\r\n                await Product.findByIdAndUpdate(\r\n                    product_id,\r\n                    {$set: {listQuantityRemain: updatedListQuantityRemain}},\r\n                    {new: true}\r\n                );\r\n\r\n                // Các kiểm tra khác nếu cần\r\n                // ...\r\n            }\r\n\r\n            const order = await newOrder.save();\r\n\r\n            return res.status(200).json({\r\n                message: \"Create order successfully\",\r\n                data: newOrder.products,\r\n            });\r\n        } catch (error) {\r\n            res.status(500).json({error: true, message: error.message});\r\n        }\r\n    };\r\n\r\n// chi tiết đơn hàng\r\n    export const GetDetailOrder = async (req, res, next) => {\r\n        try {\r\n            let id = Number(req.query.id);\r\n            let data = await Orders.findOne({id_order: id}).lean();\r\n            return functions.success(res, \"get data success\", {data});\r\n        } catch (error) {\r\n            return functions.setError(res, error.message);\r\n        }\r\n    };\r\n    export const GetAllOrder = async (req, res, next) => {\r\n        try {\r\n            let data = await Orders.find({});\r\n            return functions.success(res, \"get data success\", {data});\r\n        } catch (error) {\r\n            return functions.setError(res, error.message);\r\n        }\r\n    };\r\n\r\n    export const deleteOrder = async (req, res, next) => {\r\n        try {\r\n            const {_id} = req.query;\r\n            let data = await Orders.deleteOne({_id});\r\n            return functions.success(res, \"delete data success\", {data});\r\n        } catch (error) {\r\n            return functions.setError(res, error.message);\r\n        }\r\n    };\r\n\r\n    export const updateOrder = async (req, res, next) => {\r\n        try {\r\n            const {_id, address, phone, status} = req.query;\r\n            var dd = {};\r\n            if (address != \"\") dd = {...dd, ...{address}};\r\n            if (phone != \"\") dd = {...dd, ...{phone}};\r\n            if (status != \"\") dd = {...dd, ...{status}};\r\n\r\n            console.log(req.query);\r\n            let data = await Orders.updateOne({_id}, {$set: dd});\r\n            return functions.success(res, \"update data success\", {data});\r\n        } catch (error) {\r\n            return functions.setError(res, error.message);\r\n        }\r\n    };\r\n// get order by ID\r\nexport const getOrderById = async (req, res) => {\r\n    try {\r\n        const orderId = req.params.id; // Assuming the order ID is passed as a parameter in the request URL\r\n\r\n        // Add any additional validation for orderId if needed\r\n        const order = await Orders.aggregate([\r\n            {\r\n                $match: {\r\n                    _id: new mongoose.Types.ObjectId(orderId),\r\n                },\r\n            },\r\n            {\r\n                $unwind: \"$products\",\r\n            },\r\n            {\r\n                $lookup: {\r\n                    from: \"products\",\r\n                    localField: \"products.product_id\",\r\n                    foreignField: \"_id\",\r\n                    as: \"product\",\r\n                },\r\n            },\r\n            {\r\n                $lookup: {\r\n                    from: \"payment\",\r\n                    localField: \"payment_id\",\r\n                    foreignField: \"_id\",\r\n                    as: \"payment\",\r\n                },\r\n            },\r\n            {\r\n                $lookup: {\r\n                    from: \"users\", // Assuming your User model is named \"User\" and is stored in the \"users\" collection\r\n                    localField: \"user_id\",\r\n                    foreignField: \"_id\",\r\n                    as: \"user\",\r\n                },\r\n            },\r\n            {\r\n                $unwind: {\r\n                    path: \"$payment\",\r\n                    preserveNullAndEmptyArrays: true,\r\n                },\r\n            },\r\n            {\r\n                $project: {\r\n                    user_id: 1,\r\n                    status: 1,\r\n                    total_price: 1,\r\n                    createdAt: 1,\r\n                    updatedAt: 1,\r\n                    payment: 1,\r\n                    product: {$arrayElemAt: [\"$product\", 0]},\r\n                    quantity: \"$products.quantity\",\r\n                    color: \"$products.color\",\r\n                    size: \"$products.size\",\r\n                    user: {$arrayElemAt: [\"$user\", 0]},\r\n                },\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: {\r\n                        _id: \"$_id\",\r\n                        user_id: \"$user_id\",\r\n                        address: \"$address\",\r\n                        status: \"$status\",\r\n                        payment: \"$payment\",\r\n                        total_price: \"$total_price\",\r\n                        createdAt: \"$createdAt\",\r\n                        updatedAt: \"$updatedAt\",\r\n                    },\r\n                    products: {\r\n                        $push: { product: \"$product\",\r\n                         quantity: \"$quantity\" ,\r\n                         color: \"$color\" ,\r\n                         size: \"$size\" \r\n                        },\r\n                    },\r\n                    user: {$first: \"$user\"},\r\n                },\r\n            },\r\n            {\r\n                $project: {\r\n                    _id: \"$_id\",\r\n                    user_id: \"$_id.user_id\",\r\n                    address: \"$_id.address\",\r\n                    status: \"$_id.status\",\r\n                    total_price: \"$_id.total_price\",\r\n                    payment: \"$_id.payment\",\r\n                    createdAt: \"$_id.createdAt\",\r\n                    updatedAt: \"$_id.updatedAt\",\r\n                    products: 1,\r\n                    user: 1,\r\n                },\r\n            },\r\n            {\r\n                $sort: {\r\n                    createdAt: -1,\r\n                },\r\n            },\r\n        ]);\r\n\r\n        if (order.length === 0) {\r\n            return res.status(404).json({\r\n                message: \"Order not found\",\r\n            });\r\n        }\r\n\r\n        return res.status(200).json({\r\n            message: \"Get order by ID successfully\",\r\n            data: order[0], // Assuming there should be only one order with the given ID\r\n        });\r\n    } catch (error) {\r\n        console.error('Error in getOrderById:', error);\r\n        return functions.setError(res, error.message);\r\n    }\r\n};\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BE/src/controllers/order.js b/BE/src/controllers/order.js
--- a/BE/src/controllers/order.js	
+++ b/BE/src/controllers/order.js	
@@ -86,7 +86,9 @@
                 $project: {
                     user_id: 1,
                     status: 1,
-                    total_price: 1,
+                    total_amount_paid: 1,
+                    user_id: 1,
+                    payment_type: 1,
                     createdAt: 1,
                     updatedAt: 1,
                     payment: 1,
@@ -104,6 +106,8 @@
                         user_id: "$user_id",
                         address: "$address",
                         status: "$status",
+                        total_amount_paid: "$total_amount_paid",
+                        payment_type: "$payment_type",
                         payment: "$payment",
                         total_price: "$total_price",
                         createdAt: "$createdAt",
@@ -125,6 +129,8 @@
                     user_id: "$_id.user_id",
                     address: "$_id.address",
                     status: "$_id.status",
+                    total_amount_paid: "$_id.total_amount_paid",
+                    payment_type: "$_id.payment_type",
                     total_price: "$_id.total_price",
                     payment: "$_id.payment",
                     createdAt: "$_id.createdAt",
@@ -324,6 +330,8 @@
                     user_id: 1,
                     status: 1,
                     total_price: 1,
+                    total_amount_paid: 1,
+                    payment_type: 1,
                     createdAt: 1,
                     updatedAt: 1,
                     payment: 1,
@@ -339,6 +347,8 @@
                     _id: {
                         _id: "$_id",
                         user_id: "$user_id",
+                        total_amount_paid: "$total_amount_paid",
+                        payment_type: "$payment_type",
                         address: "$address",
                         status: "$status",
                         payment: "$payment",
@@ -360,6 +370,8 @@
                 $project: {
                     _id: "$_id",
                     user_id: "$_id.user_id",
+                    total_amount_paid: "$_id.total_amount_paid",
+                    payment_type: "$_id.payment_type",
                     address: "$_id.address",
                     status: "$_id.status",
                     total_price: "$_id.total_price",
Index: FE/src/pages/layout/Users/Payment/Payment.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { removeProductToCart, removeMultiplePrdCart } from \"@/store/cart/cart.slice\";\r\nimport { useAppDispatch, useAppSelector } from \"@/store/hook\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNewOrderMutation } from \"@/api/order\";\r\nimport { BsFillTrash3Fill } from \"react-icons/bs\";\r\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nlet paymentOrderOne = true;\r\nconst userString = localStorage.getItem(\"user\");\r\nconst user = userString ? JSON.parse(userString) : {};\r\n\r\nconst Payment = () => {\r\n    const carts = useAppSelector((state) => state.cart.cart);\r\n    const [checkedItems, setCheckedItems] = useState<any>({});\r\n    const [searchParams] = useSearchParams();\r\n    const [selectAll, setSelectAll] = useState(false);\r\n    const navigate = useNavigate();\r\n    const dispatch = useAppDispatch();\r\n    const [newOrder] = useNewOrderMutation();\r\n\r\n    const handleSelectAll = () => {\r\n        const newCheckedItems: any = {};\r\n        if (!selectAll) {\r\n            // Chọn tất cả\r\n            carts.forEach((item: any) => {\r\n                newCheckedItems[item._id] = true;\r\n            });\r\n        }\r\n        setCheckedItems(newCheckedItems);\r\n        setSelectAll(!selectAll);\r\n    };\r\n\r\n    const handleToTalCart = () => {\r\n        const totalPrice = carts.reduce((value, item) => value + item.quantity * item.product.price, 0);\r\n        const totalQuantity = carts.reduce((total, item) => total + item.quantity, 0);\r\n\r\n        return {\r\n            totalQuantity,\r\n            length: carts.length,\r\n            totalPrice,\r\n        };\r\n    };\r\n\r\n\r\n    const formatPaymentOrder = () => {\r\n        let transformedArray = carts?.map(item => {\r\n            return {\r\n                \"product_id\": item.product._id,\r\n                \"color\": item.product.listQuantityRemain[0].colorHex,\r\n                \"size\": item.product.listQuantityRemain[0].nameSize,\r\n                \"quantity\": item.quantity\r\n            };\r\n        });\r\n\r\n        const dataCreateCart = {\r\n            \"user_id\": user?._id,\r\n            \"status\": \"pending\", // Bạn có thể bỏ qua trường này để sử dụng giá trị mặc định \"pending\"\r\n            \"products\": transformedArray,\r\n            \"total_price\": handleToTalCart().totalPrice,\r\n            \"address\": \"Địa chỉ của bạn\",\r\n            \"sale_id\": \"6555018adbb1621a26e79a3e\"\r\n        };\r\n        return dataCreateCart;\r\n\r\n    }\r\n\r\n    const createOrder = async (infoOrder) => {\r\n        await newOrder(infoOrder as any).unwrap();\r\n        sessionStorage.removeItem(\"infoPayment\");\r\n        dispatch(removeMultiplePrdCart(carts?.map((cart: any) => cart.product._id) as any));\r\n        // Cos thể send mail bill ở đây\r\n        navigate(\"/order-history\");\r\n    }\r\n\r\n    const paymentOrder = async () => {\r\n        if (\r\n            carts &&\r\n            carts.length > 0 &&\r\n            paymentOrderOne &&\r\n            searchParams.get(\"vnp_ResponseCode\") &&\r\n            searchParams.get(\"vnp_ResponseCode\") == \"00\") {\r\n           const dataCreateOrder = formatPaymentOrder();\r\n           createOrder(dataCreateOrder);\r\n            console.log('infoCart', dataCreateOrder,carts)\r\n        }else{\r\n            Swal.fire({\r\n                icon: \"error\",\r\n                title: \"Thanh toán thất bại\",\r\n                text: \"Vui lòng kiểm tra lại thông tin đơn hàng!\",\r\n                footer: '<a href=\"#\">Why do I have this issue?</a>'\r\n              }).then((result) => {\r\n                navigate(\"/cart\");\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        paymentOrder();\r\n      }, []);\r\n\r\n    useEffect(() => {\r\n        const handleNewBooking = async () => {\r\n            \r\n\r\n        };\r\n        handleNewBooking();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [searchParams.get(\"payment_id\")]);\r\n    useEffect(() => {\r\n        const allChecked = carts.every((item: any) => checkedItems[item._id]);\r\n        setSelectAll(allChecked);\r\n    }, [checkedItems, carts]);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"mt-10\">\r\n                <h1 className=\"text-center font-sans font-bold text-3xl mb-10\">Thông Tin Đơn Hàng</h1>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-3 \">\r\n                    <div className=\"md:col-span-2 \">\r\n                        <div className=\"overflow-x-auto mx-10\">\r\n                            <table className=\" table min-w-full divide-y-2 divide-gray-200 bg-white text-sm \">\r\n                                <thead className=\"ltr:text-left rtl:text-right \">\r\n                                    <tr>\r\n                                        <th className=\"whitespace-nowrap py-4   font-medium text-gray-900 text-left\">Tên sản phẩm</th>\r\n                                        <th className=\"whitespace-nowrap py-4  px-1  font-medium text-gray-900 text-left text:xs lg:text-xl\">Loại</th>\r\n                                        <th className=\"whitespace-nowrap py-4 font-medium text-gray-900 text-left\">Số Lượng</th>\r\n                                        <th className=\"whitespace-nowrap py-4 font-medium text-gray-900 text-left\">Giá</th>\r\n                                        <th className=\"whitespace-nowrap py-4 font-medium text-gray-900 text-left\">Thành tiền</th>\r\n                                        <th className=\"whitespace-nowrap py-4 font-medium text-gray-900 text-left\"></th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody className=\"divide-y divide-gray-200 \">\r\n                                    {carts?.map((cart, index) => (\r\n                                        <tr key={index}>\r\n                                            <td className=\"whitespace-nowrap  text-gray-700 py-4 \">\r\n                                                <div className=\" items-center \">\r\n                                                    <p className=\"text-xs lg:text-base\">{cart.product.name}</p>\r\n                                                </div>\r\n                                            </td>\r\n                                            <td className=\"whitespace-nowrap  text-gray-700 py-4 \">\r\n                                                <div className=\" items-center \">\r\n                                                    <div className=\"flex items-center gap-1\">\r\n                                                        <span className=\"text-xs lg:text-base md:text-xl \">colorHex:    {cart.product.listQuantityRemain?.find((item) => item.color === cart.color)?.colorHex\r\n                                                        }</span>\r\n                                                        <span className=\"flex gap-3 rounded-full w-4 h-4 opacity-70\"></span>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <span className=\"  gap-3 text-xs lg:text-base md:text-xl\">nameColor:  {\r\n                                                    cart.product.listQuantityRemain?.find((item) => item.color === cart.color)?.nameColor\r\n                                                }</span>\r\n                                                <br />\r\n                                                <span className=\"  gap-3 text-xs lg:text-base md:text-xl\">\r\n                                                    nameSize :{\r\n                                                        cart.product.listQuantityRemain?.find((item) => item.color === cart.color)?.nameSize\r\n                                                    }\r\n                                                </span>\r\n                                            </td>\r\n                                            <td className=\"whitespace-nowrap text-gray-700 py-4\">\r\n                                                <div className=\"flex items-center text-xs lg:text-xl\">\r\n                                                    <div className=\"\">{cart.quantity}</div>\r\n                                                </div>\r\n                                            </td>\r\n                                            <td className=\" whitespace-nowrap  text-gray-700  text-xs md:text-base py-4 \">\r\n                                                {cart.product.price?.toLocaleString()} VNĐ\r\n                                            </td>\r\n                                            <td className=\" whitespace-nowrap  text-gray-700  text-xs md:text-base py-4 \">\r\n                                                {(cart.product.price * cart.quantity).toLocaleString()} VNĐ\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/*  */}\r\n                    <div className=\"col-span-1 mx-10 \">\r\n                        <div className=\"mt-4 border border-green-500 rounded-md p-2\">\r\n                            <h3 className=\"text-xl font-semibold\">Thông tin thanh toán</h3>\r\n\r\n                            <div className=\"mt-4 space-y-2\">\r\n                                <div>Trạng thái đơn : Pending</div>\r\n                                <div>Số lượng sp : {handleToTalCart().totalQuantity} </div>\r\n                                <div>Số điên thoại : 0976594507 </div>\r\n                                <div>Địa chỉ : 0976594507 </div>\r\n                                <hr></hr>\r\n                                <h1><b><div>Thanh toán: \t{handleToTalCart().totalPrice?.toLocaleString()} VNĐ</div></b></h1>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"mt-4 col-span-1 \">\r\n                            <div className=\"\">\r\n                                <div className=\"border-2 p-2\">\r\n                                    <h3 className=\"font-bold px-3\">Thông tin điều khoản </h3>\r\n                                    <div className=\"m-5 flex-col\">\r\n                                        Bằng cách đặt đơn hàng, bạn dồng ý với điều khoản sủ dụng và bán hàng của sneakerStore và xác nhận rằng bạn đã đọc\r\n                                        chính sách quyền riêng tư{\" \"}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Payment;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FE/src/pages/layout/Users/Payment/Payment.tsx b/FE/src/pages/layout/Users/Payment/Payment.tsx
--- a/FE/src/pages/layout/Users/Payment/Payment.tsx	
+++ b/FE/src/pages/layout/Users/Payment/Payment.tsx	
@@ -58,10 +58,11 @@
             "products": transformedArray,
             "total_price": handleToTalCart().totalPrice,
             "address": "Địa chỉ của bạn",
-            "sale_id": "6555018adbb1621a26e79a3e"
+            "sale_id": "6555018adbb1621a26e79a3e",
+            "total_amount_paid": handleToTalCart().totalPrice,
+            "payment_type": "bank",
         };
         return dataCreateCart;
-
     }
 
     const createOrder = async (infoOrder) => {
Index: BE/src/Schema/order.schema.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Joi from \"joi\";\r\n\r\nexport const validation = (req, res, next) => {\r\n    const schema = Joi.object({\r\n        user_id: Joi.string().required(),\r\n        status: Joi.string().default(\"pending\"), // Đặt giá trị mặc định là \"pending\"\r\n        products: Joi.array().items({\r\n            product_id: Joi.string().required(),\r\n            color: Joi.string().required(),\r\n            size: Joi.string().required(),\r\n            quantity: Joi.number().required(),\r\n        }),\r\n        total_price: Joi.number().required(),\r\n        address: Joi.string().required(),\r\n        sale_id: Joi.string().allow(null), // Cho phép giá trị là null\r\n    });\r\n\r\n    const result = schema.validate(req.body);\r\n\r\n    try {\r\n        if (result.error) {\r\n            return res.status(401).json({ error: 2, message: result.error.details[0].message });\r\n        }\r\n        next();\r\n    } catch (err) {\r\n        return res.status(500).json({\r\n            err: 1,\r\n            message: new Error(err).message,\r\n        });\r\n    }\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BE/src/Schema/order.schema.js b/BE/src/Schema/order.schema.js
--- a/BE/src/Schema/order.schema.js	
+++ b/BE/src/Schema/order.schema.js	
@@ -13,6 +13,8 @@
         total_price: Joi.number().required(),
         address: Joi.string().required(),
         sale_id: Joi.string().allow(null), // Cho phép giá trị là null
+        total_amount_paid:Joi.number().default(0),
+        payment_type:Joi.string().default('cash'),
     });
 
     const result = schema.validate(req.body);
